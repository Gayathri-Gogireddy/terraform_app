name: Application Pipeline

on:
  push:
    branches:
      - main

jobs:
  create-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
        run: |
          terraform init

      - name: Apply Terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
        run: |
          terraform apply -auto-approve -var github_token=$GITHUB_TOKEN -var github_username=$GITHUB_USERNAME
      
      - name: Get Terraform Output
        id: get_output
        run: |
           # Capture the JSON output from Terraform
           terraform output -json repos > repos.json
           # Print the content to check it
           cat repos.json
      - name: Upload repos.json as artifact
        uses: actions/upload-artifact@v3
        with:
          name: repos-json
          path: repos.json

  setup-repos:
    needs: create-repos
    runs-on: ubuntu-latest
    steps:
      - name: Download repos.json
        uses: actions/download-artifact@v3
        with:
          name: repos-json
      - name: Checkout Source Repo
        uses: actions/checkout@v2
        with:
          repository: source-org/source-repo
          path: source-code

      - name: Set Up Git
        run: |
          git config --global user.email "gogireddy.gayathri2002@gmail.com"
          git config --global user.name "Gayathri-Gogireddy"
      - name: Process Applications
        run: |
          repos=$(cat repos.json)
          echo $repos | jq -c '.[]' | while read repo; do
            app_name=$(echo $app | jq -r '.')

            # Debug: Output repository name
            echo "Processing repository: ${repo_name}"
            
            # Clone the newly created repo
            git clone https://github.com/${{ secrets.GH_USERNAME }}/${app_name}.git
            cd ${app_name}
            ls -la
            # Copy source code
            cp -r ../source-code/* .
            ls -la
             
            # Update GitHub Actions workflow
            sed -i "s/OLD_VARIABLE_NAME/${app_name}/g" .github/workflows/deploy.yml

            # Update terraform.tfvars
            sed -i "s/OLD_VAR1/NEW_VAR1/g" terraform.tfvars
            sed -i "s/OLD_VAR2/NEW_VAR2/g" terraform.tfvars

            # Commit and push changes
            git add .
            git commit -m "Configured for ${app_name}"
            git push origin main

            cd ..
          done
      
